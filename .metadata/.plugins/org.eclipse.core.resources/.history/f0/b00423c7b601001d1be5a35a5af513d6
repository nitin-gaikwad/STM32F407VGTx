/*
 * SPI_driver.c
 *
 *  Created on: १० डिसें, २०२०
 *      Author: Nitin Gaikwad
 */


#include "SPI_driver.h"


/*
 * SPI device mode*/
#define SPI_DEVICE_MODE_MASTER		1
#define SPI_DEVICE_MODE_SLAVE		0

/*
 * SPI Bus Config
 * */

#define SPI_BUS_CONFIG_FD					1
#define SPI_BUS_CONFIG_HD					2
#define SPI_BUS_CONFIG_SIMPLEX_RXONLY		3


/*
 * SPI Bus Config
 * */

#define SPI_SCLK_DIV2				0
#define SPI_SCLK_DIV4				1
#define SPI_SCLK_DIV8				2
#define SPI_SCLK_DIV16				3
#define SPI_SCLK_DIV32				4
#define SPI_SCLK_DIV64				5
#define SPI_SCLK_DIV128				6
#define SPI_SCLK_DIV256				7



/*
 * SPI Data Frame Format
 *
 *
 *   */
#define SPI_DFF_8BIT				0
#define SPI_DFF_16BIT				1

/*
 * SPI CLOCK POLARITY
 *
 *
 *   */
#define SPI_CPOL_LOW				0
#define SPI_CPOL_HIGH				1

/*
 * SPI CLOCK PHASE
 *
 *
 *   */
#define SPI_CPHA_LOW				0
#define SPI_CPHA_HIGH				1


/*
 * SPI SLAVE SELECT MANAGEMENT (SSM)
 *
 *
 *   */
#define SPI_SSM_EN	1
#define SPI_SSM_DI	0


// 1. SPI Initialization and De-initialization

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
	uint32_t tempreg=0;

	//1. configure device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode <<2;
	//pSPIHandle->pSPIx->SPI_CR1|=tempreg;

	//2. Configure Bus Config
	if(pSPIHandle->SPIConfig.SPI_BusConfig ==  SPI_BUS_CONFIG_FD)
	{
		//BIDI mode should be cleared
		tempreg &= ~(1<<15)

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
	{
		//BIDI mode should be SET
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig ==  SPI_BUS_CONFIG_SIMPLEX_RXONLY)
	{
		BIDI mode should be CLEARED and  RX ONLY bit should be SET

	}
}

void SPI_DeInit(SPI_RegDef_t *pSPIx);

/*
 * @brief SPI Clock Control for GPIO
 * @param  *pSPIx 	: SPI base address
 * @param  EnorDi   :  Enable or disable clock of given SPI
 * @return void		: None
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_EN();
		}
		else if(pSPIx == SPI2)
		{
			SPI2_PCLK_EN();
		}
		else if(pSPIx == SPI3)
		{
			SPI3_PCLK_EN();
		}
	}
	else
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_DI();
		}else if(pSPIx == SPI2)
		{
			SPI2_PCLK_DI();
		}else if(pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
	}
}

// 3. SPI Recieve
uint16_t  SPI_Receive(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{

	return 0;
}
// 4. SPI Transmitt
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{

}
// 5. SPI Interrupt

// 6. SPI Interrupt Handler

/**
	* @brief  Configure the interrupt for a given IRQNumber number
	* @param  IRQNumber : IRQNumber number
	* @param  EnorDi   :  Enable or disable a given IRQNumber number
	* @retval None
	*/
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{

}
/**
	* @brief  Configure the interrupt Priority
	* @param  IRQNumber : IRQNumber number
	* @param  IRQPriority   :  Priority level of IRQ
	* @retval None
	*/
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{

}

/**
	* @brief  SPI IRQ Handler
	* @param  *pHandle : pointer to SPI handle type
	* @retval None
	*/
void SPI_IRQHandling(SPI_Handle_t *pHandle)
{

}

